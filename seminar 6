
//retinemn adresa primului si ultimului nod inttr-o noua structura

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <malloc.h>

typedef struct CafeneaMea Cafenea; // alias
typedef struct Nod Nod;
typedef struct ListaDubla ListaDubla;

struct CafeneaMea {
	char* nume;
	int nrLocuri;
	float suprafata;
};

struct Nod {
	Cafenea cafenea;
	Nod* urmator;
	Nod* anterior;
};

struct ListaDubla {
	Nod* cap;
	Nod* coada;
};


void inserareInceput(ListaDubla* listaDubla, Cafenea cafenea) {
	Nod* nou = malloc(sizeof(Nod));
	nou->anterior = NULL;
	nou->cafenea = cafenea;
	nou->urmator = listaDubla->cap;

	if (listaDubla->cap != NULL)
	{
		listaDubla->cap->anterior = nou;
	}
	else 
	{
		listaDubla->coada = nou;
	}

	listaDubla->cap = nou;


}

Cafenea initializare(const char* nume, int nrLocuri, float suprafata) {
	Cafenea c;
	c.nume = (char*)malloc(sizeof(char) * (strlen(nume) + 1));
	strcpy(c.nume, nume);
	c.nrLocuri = nrLocuri;
	c.suprafata = suprafata;

	return c;
}



void afisareCafenea(Cafenea c) {
	printf("\nDenumire: %s Nr scaune: %d Suprafata: %.2f\n", c.nume, c.nrLocuri, c.suprafata);
}

void afisareLista(ListaDubla listaDubla) {
	//parcurgem de la inceput la sfarsit
	Nod* nod = listaDubla.cap;
	while (nod) {
		afisareCafenea(nod->cafenea);
		nod = nod->urmator;
	}

	printf("\n================");
}

ListaDubla stergereDupaNume(ListaDubla listaDubla, const char* nume) {
	if (nume == NULL) {
		return listaDubla;
	}
	Nod* nod = listaDubla.cap;
	while (nod && strcmp(nod->cafenea.nume, nume) != 0) {

		nod = nod->urmator;
	}
	if (nod != NULL)
	{
		if (nod-> urmator == NULL && nod->anterior == NULL)
		{
			listaDubla.cap = NULL;
			listaDubla.coada = NULL;
		}

		else 
		{
			if (nod->anterior == NULL) {
				listaDubla.cap = nod->urmator;
				listaDubla.cap->anterior = NULL;
			}

			else if (nod->urmator == NULL) {
				listaDubla.coada = nod->anterior;
				listaDubla.coada->urmator = NULL;
			}

			else {
				nod->anterior->urmator = nod->urmator;
				nod->urmator->anterior = nod->anterior;
			}

		}

		free(nod->cafenea.nume);
		free(nod);
	}
	return listaDubla ;

}

ListaDubla stergereLista(ListaDubla listaDubla) { // parcurgere de la inceput la final
		while (listaDubla.cap != NULL) {
			free(listaDubla.cap->cafenea.nume);

			Nod* temp = listaDubla.cap;

			listaDubla.cap = listaDubla.cap->urmator;

			free(temp);
		}
		listaDubla.cap = NULL;
		listaDubla.coada = NULL;

		return listaDubla;
}

int NrTotalLocuri(ListaDubla lista) {
	if (lista.cap == NULL) {
		return 0;
	}
	int nrLocuri = 0;
	Nod* nod = lista.coada; // parcurgere de la final la inceput
	while (nod != NULL) {
		nrLocuri += nod->cafenea.nrLocuri;
		nod = nod->anterior;
	}


	return nrLocuri;
}

void main()
{
	Cafenea c = initializare("Tucano", 12, 20);
	Cafenea c1 = initializare("Teds", 17, 17.3);
	Cafenea c2 = initializare("Urban", 30, 33);
	Cafenea c3 = initializare("SB", 30, 33);

	ListaDubla listaDubla;	
	listaDubla.cap = NULL;
	listaDubla.coada = NULL;

	inserareInceput(&listaDubla, c);
	inserareInceput(&listaDubla, c1);
	inserareInceput(&listaDubla, c2);
	inserareInceput(&listaDubla, c3);

	afisareLista(listaDubla);

	//listaDubla = stergereDupaNume(listaDubla, "Teds");
	//afisareLista(listaDubla);

	//listaDubla = stergereDupaNume(listaDubla, "Tucano");
	//afisareLista(listaDubla);

	//listaDubla = stergereDupaNume(listaDubla, "Starbucks");
	//afisareLista(listaDubla);


	//listaDubla = stergereDupaNume(listaDubla, "SB");
	//afisareLista(listaDubla);

	//listaDubla = stergereDupaNume(listaDubla, "Urban");
	//afisareLista(listaDubla);o

	printf("Nr locuri totale: %d", NrTotalLocuri(listaDubla));


	listaDubla = stergereLista(listaDubla);

	afisareLista(listaDubla);
}
