#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>

// arbori binari de cautare = graf aciclic, conex si orientat
// fiecare nod are maxim 2 descendenti
// elementele asezate dupa reguli pentru a usura cautarea
// descendentul din dreapta trebuie sa fie mai mare decat radacina
// in stanga valori mai mici
// se face cu divide et impera

typedef struct Cinema Cinema;
struct Cinema {
	int id;
	int nrFilme;
	char** listaFilme;
};

typedef struct Nod Nod;
struct Nod {
	Cinema info;
	Nod* st;
	Nod* dr;
};

void inserareInArbore(Nod** radacina, Cinema c) {
	if (*radacina)   ///verificam daca avem arbore 
	{ 
		if ((*radacina)->info.id > c.id) {
			inserareInArbore(&((*radacina)->st), c);
		}
		else {
			inserareInArbore(&((*radacina)->dr), c);
		}
	}

	else {
		Nod* nod = malloc(sizeof(Nod)); //inserarea se face intotdeauna intr un nod frunza

		nod->dr = NULL;
		nod->st = NULL;
		nod->info = c; //shallow copy
		*radacina = nod;

	}
}

Cinema citireCinema(FILE * f) {
	Cinema c;

	fscanf(f, "%d", &c.id);
	fscanf(f, "%d", &c.nrFilme);
	if (c.nrFilme != 0) {

		c.listaFilme = (char**)malloc(sizeof(char*) * c.nrFilme);

		for (int i = 0; i < c.nrFilme; i++) {
			char buffer[100];
			fscanf(f, "%s", buffer);

			c.listaFilme[i] = malloc(sizeof(char*) * (strlen(buffer) + 1));
			strcpy(c.listaFilme[i], buffer);

		}
	}
	else {
		c.listaFilme = NULL;
		 }

	return c;
}

Nod* citireDinFisier(const char * numeFisier) {
	Nod* radacina = NULL;
	if (numeFisier != NULL && strlen(numeFisier) != 0) {
		FILE* f = fopen(numeFisier, "r");
		Nod* arbore = NULL;
		if (f != NULL) {
			int dim = 0;
			fscanf(f, "%d", &dim);
		
			for (int i = 0; i < dim; i++) 
			{
				Cinema cinema;
				cinema = citireCinema(f);

				inserareInArbore(&radacina, cinema);
			}

		}

	}
	return radacina;
}

void afisareCinema(Cinema c) {
	printf("Cinemaul cu id-ul %d are in derulare %d filme", c.id, c.nrFilme);
	for (int i = 0; i < c.nrFilme; i++) {
		printf("%s, ", c.listaFilme[i]);
	}
	printf("\n");
}
//Parcurgeri:
// inordine - SRD
// preordine - RSD procesez info din nod-dupa din subarborele stang-dupa subarborele drept
// postordine - SDR

void afisareArborePreordine(Nod* rad) {
	if (rad) {
		afisareCinema(rad->info);
		afisareArborePreordine(rad->st);
		afisareArborePreordine(rad->dr);
	}
}

void afisareArboreInordine(Nod* rad) {
	if (rad) {
		afisareArboreInordine(rad->st);
		afisareCinema(rad->info);
		afisareArboreInordine(rad->dr);
	}
}

int calculNrFilmeRedate(Nod* rad) {
	if (rad) {
		int suma = rad->info.nrFilme;
		suma += calculNrFilmeRedate(rad->st); //parcurgere in preordine
		suma += calculNrFilmeRedate(rad->dr);

		return suma;
	}

	else {
		return 0; // aici se face initializarea cu 0
	}
}

void main() {
	Nod* arbore = NULL;

	arbore = citireDinFisier("cinema.txt");

	printf("\nPREORDINE");
		afisareArborePreordine(arbore);

		printf("\nINORDINE");
		afisareArboreInordine(arbore); // elementele sunt sortate dupa id

		printf("\n\nNUMAR FILME %d", calculNrFilmeRedate(arbore));

}
