#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <malloc.h>

typedef struct CafeneaMea Cafenea; // alias
typedef struct Nod Nod;

struct CafeneaMea {
	char* nume;
	int nrLocuri;
	float suprafata;
};

struct Nod {
	Cafenea info;
	Nod* next;
};

Cafenea initializare(const char* nume, int nrLocuri, float suprafata) {
	Cafenea c;
	c.nume = (char*)malloc(sizeof(char) * (strlen(nume) + 1));
	strcpy(c.nume, nume);
	c.nrLocuri = nrLocuri;
	c.suprafata = suprafata;

	return c;
}

Nod* inserareInceput(Cafenea c, Nod* cap) {
	Nod* nou = malloc(sizeof(Nod));
	nou->next = cap;
	nou->info = initializare(c.nume, c.nrLocuri, c.suprafata);

	return nou;
}

void afisareCafenea(Cafenea c) {
	printf("\nDenumire: %s Nr scaune: %d Suprafata: %.2f\n", c.nume, c.nrLocuri, c.suprafata);
}


void afisareCafenele(Nod* lista) {
	while (lista != NULL) {
		afisareCafenea(lista->info);
		lista = lista->next;
	}
}

// numele cafenelei cu densitatea cea mai mica

char* numeCafeneaDensMin(Nod* lista) {
	if (lista != NULL) {
		if (lista->info.suprafata != 0) {
			float minim = lista->info.nrLocuri / lista->info.suprafata;
			Nod* adresa = lista;
			lista = lista->next;

			while (lista != NULL) {
				if (lista->info.nrLocuri / lista->info.suprafata < minim)
				{
					minim = lista->info.nrLocuri / lista->info.suprafata;
					adresa = lista;
				}

				lista = lista->next;

			}

			char* nume;
			nume = malloc(sizeof(char) * (strlen(adresa->info.nume) + 1));
				strcpy(nume, adresa->info.nume);
				return nume;
		}
			
	}
	return NULL;
}

void stergeLista(Nod** nod){ // il transMitem prin pointer ca il modificam
	while (*nod != NULL)
	{
		Nod* aux;
		aux = *nod;
		*nod = (*nod)->next;
		free(aux->info.nume);
		free(aux);

	}

	*nod = NULL;
}


void inserareFinal(Nod** lista, Cafenea c) {
	if ((*lista) == NULL) {
		(*lista) = inserareInceput(c, *lista);
	}
	else {
		Nod* curent = (*lista);
		while (curent->next != NULL) {
			curent = curent->next;
		}
		Nod* n = (Nod*)malloc(sizeof(Nod));
		
		n->info = initializare(c.nume, c.nrLocuri, c.suprafata);
		n->next = NULL;

		curent->next = n;
	}
}

void main() 
{
	Nod* cap = NULL;

	Cafenea c = initializare("Tucano", 12, 20);

	Cafenea c1 = initializare("Teds", 17, 17.3);

	Cafenea c2 = initializare("Urban", 30, 33);

	Cafenea sb = initializare("SB", 30, 33);

	cap = inserareInceput (c, cap);
	cap = inserareInceput(c1, cap);
	cap = inserareInceput(c2, cap);

	afisareCafenele(cap);

	char* numeMin = numeCafeneaDensMin(cap);
	printf("\nCafeneaua cu dens min : %s\n", numeMin);

	printf("\n=====================\n");

	inserareFinal(&cap, sb);

	afisareCafenele(cap);

	stergeLista(&cap);

	afisareCafenele(cap);

	free(c.nume);
	c.nume = NULL;


	free(c1.nume);
	c1.nume = NULL;


	free(c2.nume);
	c2.nume = NULL;

	free(numeMin);
}

